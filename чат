Пользователи (Users)
Коллекция: users

Поля:

_id (ObjectId): уникальный идентификатор пользователя.
username: уникальное имя пользователя.
email: электронная почта.
password: хэш пароля.
avatarUrl: ссылка на аватарку.
firstName: имя.
lastName: фамилия.
gender: пол.
dateOfBirth: дата рождения.
createdAt: время регистрации.
updatedAt: последнее обновление профиля.
Сообщения (Messages)
Коллекция: messages

Поля:

_id (ObjectId): уникальный идентификатор сообщения.
senderId: ID отправителя.
receiverId: ID получателя (может быть группой).
text: текст сообщения.
timestamp: время отправки.
read: флаг, прочитано ли сообщение.
Чаты (Chats)
Коллекция: chats

Поля:

_id (ObjectId): уникальный идентификатор чата.
name: название чата (для групповых чатов).
members: массив участников чата (_id пользователей).
type: тип чата (одиночный, групповой).
messages: массив сообщений (можно хранить ссылки на сообщения из другой коллекции).
Сообщества (Communities)
Коллекция: communities

Поля:

_id (ObjectId): уникальный идентификатор сообщества.
name: название сообщества.
description: описание сообщества.
ownerId: владелец сообщества.
members: массив участников (_id пользователей).
posts: массив постов (ссылки на документы из другой коллекции).
Посты (Posts)
Коллекция: posts

Поля:

_id (ObjectId): уникальный идентификатор поста.
authorId: автор поста.
communityId: сообщество, к которому относится пост.
title: заголовок поста.
content: содержание поста.
likes: количество лайков.
comments: массив комментариев (ссылки на комментарии из другой коллекции).
Комментарии (Comments)
Коллекция: comments

Поля:

_id (ObjectId): уникальный идентификатор комментария.
postId: пост, к которому относится комментарий.
authorId: автор комментария.
commentText: текст комментария.
timestamp: время добавления комментария.


Основные сущности

Пользователь (User)
Идентификатор пользователя
Имя пользователя
Электронная почта
Пароль (хэшированный)
Аватар
Статус онлайн/офлайн
Роли (администратор, модератор и т.д.)

Сообщение (Message)
Текст сообщения
Отправитель
Получатель
Время отправки
Тип сообщения (текстовое, изображение, видео и т.д.)

Чат (Chat)
Название чата
Участники чата
Сообщения чата
Администраторы чата

Друзья (Friendship)
Пользователь
Друг
Дата добавления в друзья
Статус дружбы (подтверждено, ожидает подтверждения и т.д.)

Группы/Сообщества (Group)
Название группы
Описание группы
Участники группы
Администраторы группы
Посты группы

Посты (Post)
Автор поста
Содержимое поста (текст, изображения, видео и т.д.)
Время публикации
Комментарии к посту
Лайки/реакции

Комментарий (Comment)
Автор комментария
Содержимое комментария
Время публикации
Родительский пост/комментарий

Лайк/Реакция (Like)
Пользователь, который поставил лайк
Объект, которому поставили лайк (пост, комментарий и т.д.)
Тип реакции (лайк, смайл, сердце и т.д.)

Уведомления (Notification)
Пользователь-получатель
Содержание уведомления
URL перехода
Время получения

Файлы (File)
Имя файла
Путь к файлу
Размер файла
MIME-тип
Пользователь-загрузчик

Теги (Tag)
Название тега
Количество упоминаний

Подписчики (Follower)
Пользователь-подписчик
Пользователь, за которым следят

Стена пользователя (Wall)
Пользователь-владелец стены
Посты на стене

Фотографии (Photo)
Пользователь-владелец фотографии
Альбом, в котором находится фотография
Описание фотографии
Дата загрузки

Альбомы фотографий (Album)
Название альбома
Описание альбома
Фотографии в альбоме
Доступность (общедоступный, только друзьям и т.д.)

События (Event)
Название события
Описание события
Дата начала и окончания
Место проведения
Участники события

Объявления (Ad)
Заголовок объявления
Описание объявления
Цена
Категория
Изображения объявления

Отзывы (Review)
Автор отзыва

Оценка (звезды)
Текст отзыва
Объект, к которому относится отзыв (группа, событие и т.д.)
Оповещения (Alert)

Пользователь-получатель
Тип оповещения (новое сообщение, новый друг и т.д.)
Ссылка на объект оповещения

Репорты (Report)
Пользователь-отправитель
Объект репорта (сообщение, пост и т.д.)
Причина репорта



Сущность Community
Эта сущность будет представлять собой группу или сообщество, которое объединяет пользователей вокруг общих интересов. В отличие от чатов, сообщества могут быть открытыми для присоединения новых членов и иметь дополнительные функциональные возможности, такие как посты, комментарии и лайки.


@Document(collection = "communities")
public class Community {
    @Id
    private String id;
    private String name; // Название сообщества
    private String description; // Описание сообщества
    private List<String> members; // Список участников сообщества
    private List<Post> posts; // Список постов в сообществе
    private boolean isPrivate; // Является ли сообщество приватным
    private String creatorId; // Идентификатор создателя сообщества
    private LocalDateTime creationDate; // Дата создания сообщества

    // Конструкторы, геттеры и сеттеры
}
Сущность Post
Эта сущность будет представлять собой пост в сообществе, который может содержать текст, изображения, видео и другие медиафайлы. К каждому посту могут быть прикреплены комментарии и лайки.


@Document(collection = "posts")
public class Post {
    @Id
    private String id;
    private String communityId; // Идентификатор сообщества, к которому привязан пост
    private String authorId; // Идентификатор автора поста
    private String content; // Содержимое поста (текст, ссылка на файл и т.д.)
    private List<Comment> comments; // Список комментариев к посту
    private int likesCount; // Количество лайков к посту
    private LocalDateTime postedAt; // Время публикации поста

    // Конструкторы, геттеры и сеттеры
}
Сущность Comment
Эта сущность будет представлять собой комментарий к посту в сообществе. Каждый комментарий будет привязан к конкретному посту и автору.


@Document(collection = "comments")
public class Comment {
    @Id
    private String id;
    private String postId; // Идентификатор поста, к которому привязан комментарий
    private String authorId; // Идентификатор автора комментария
    private String text; // Текст комментария
    private LocalDateTime commentedAt; // Время комментирования

    // Конструкторы, геттеры и сеттеры
}
Сущность Like
Эта сущность будет представлять собой лайк к посту или комментарию в сообществе. Каждому лайку будет соответствовать автор и объект, который получил лайк.


@Document(collection = "likes")
public class Like {
    @Id
    private String id;
    private String likedObjectId; // Идентификатор объекта, который получил лайк
    private String likerId; // Идентификатор пользователя, который поставил лайк
    private LocalDateTime likedAt; // Время, когда был поставлен лайк

    // Конструкторы, геттеры и сеттеры
}
Сущность Member
Эта сущность будет представлять члена сообщества. Она будет содержать информацию о членах сообщества, такую как дата вступления и роль в сообществе (участник, модератор, администратор).


@Document(collection = "members")
public class Member {
    @Id
    private String id;
    private String memberId; // Идентификатор участника
    private String communityId; // Идентификатор сообщества
    private Role role; // Роль участника в сообществе (PARTICIPANT, MODERATOR, ADMIN)
    private LocalDateTime joinedAt; // Дата вступления в сообщество

    // Конструкторы, геттеры и сеттеры
}
Сущность Mention
Эта сущность будет представлять упоминание пользователя в сообщении или комментарии. Она будет использоваться для уведомлений пользователей о том, что их упомянули в сообществе.


@Document(collection = "mentions")
public class Mention {
    @Id
    private String id;
    private String mentionedUserId; // Идентификатор упомянутого пользователя
    private String mentionerId; // Идентификатор пользователя, который сделал упоминание
    private String objectId; // Идентификатор объекта, в котором сделано упоминание
    private LocalDateTime mentionedAt; // Время упоминания

    // Конструкторы, геттеры и сеттеры
}
Сущность Subscription
Эта сущность будет представлять подписку пользователя на обновления в сообществе. Она будет использоваться для отправки уведомлений пользователям о новых постах и комментариях в сообществе.


@Document(collection = "subscriptions")
public class Subscription {
    @Id
    private String id;
    private String subscriberId; // Идентификатор подписчика
    private String subscribedCommunityId; // Идентификатор сообщества, на которое оформлена подписка
    private LocalDateTime subscribedAt; // Дата оформления подписки

    // Конструкторы, геттеры и сеттеры
}
Сущность Blacklist
Эта сущность будет представлять черный список пользователей в сообществе. Она будет использоваться для блокировки определенных пользователей от участия в сообществе.


@Document(collection = "blacklists")
public class Blacklist {
    @Id
    private String id;
    private String blacklistedUserId; // Идентификатор заблокированного пользователя
    private String communityId; // Идентификатор сообщества, в котором установлен бан
    private LocalDateTime bannedAt; // Время наложения бана

    // Конструкторы, геттеры и сеттеры
}
Сущность Administration
Эта сущность будет представлять административ функционал сообщества. Она будет содержать информацию о правах админа в сообществе, возможностях модерировать контент и удалять участников.


@Document(collection = "administrations")
public class Administration {
    @Id
    private String id;
    private String administratorId; // Идентификатор администратора
    private String communityId; // Идентификатор сообщества, в котором установлены права администратора
    private LocalDateTime assignedAt; // Время назначения администратором

    // Конструкторы, геттеры и сеттеры
}
Сущность Announcement
Эта сущность будет представлять объявление в сообществе. Она будет использоваться для информирования участников о новостях и событиях в сообществе.


@Document(collection = "announcements")
public class Announcement {
    @Id
    private String id;
    private String title; // Заголовок объявления
    private String content; // Содержимое объявления
    private String announcerId; // Идентификатор пользователя, сделавшего объявление
    private LocalDateTime announcedAt; // Время анонса

    // Конструкторы, геттеры и сеттеры
}
Сущность Activity
Эта сущность будет представлять активность в сообществе. Она будет использоваться для отслеживания активности в сообществе, такой как создание постов, комментарии и лайки.


@Document(collection = "activities")
public class Activity {
    @Id
    private String id;
    private String activityType; // Тип активности (POST_CREATED, COMMENT_ADDED, LIKE_RECEIVED)
    private String actorId; // Идентификатор пользователя, совершившего действие
    private String objectId; // Идентификатор объекта, к которому относится активность
    private LocalDateTime occurredAt; // Время совершения действия

    // Конструкторы, геттеры и сеттеры
}
Сущность Moderator
Эта сущность будет представлять модератора в сообществе. Она будет использоваться для управления контентом в сообществе, удаления нежелательных постов и комментариев.


@Document(collection = "moderators")
public class Moderator {
    @Id
    private String id;
    private String moderatorId; // Идентификатор модератора
    private String communityId; // Идентификатор сообщества, в котором модератор имеет полномочия
    private LocalDateTime appointedAt; // Время назначения модератором

    // Конструкторы, геттеры и сеттеры
}
Сущность Administrator
Эта сущность будет представлять администратора в сообществе. Она будет использоваться для управления пользователями, модераторами и контентом в сообществе.


@Document(collection = "administrators")
public class Administrator {
    @Id
    private String id;
    private String administratorId; // Идентификатор администратора
    private String communityId; // Идентификатор сообщества, в котором администратор имеет полномочия
    private LocalDateTime appointedAt; // Время назначения администратором

    // Конструкторы, геттеры и сеттеры
}
Сущность Reputation
Эта сущность будет представлять репутацию в сообществе. Она будет использоваться для оценки поведения пользователей в сообществе, а также для отслеживания нарушений правил.


@Document(collection = "reputations")
public class Reputation {
    @Id
    private String id;
    private String reputationHolderId; // Идентификатор пользователя, который владеет репутацией
    private String actionPerformedById; // Идентификатор пользователя, который совершил действие, влияющее на репутацию
    private String actionDescription; // Описание действия, повлиявшего на репутацию
    private LocalDateTime recordedAt; // Время регистрации действия

    // Конструкторы, геттеры и сеттеры
}